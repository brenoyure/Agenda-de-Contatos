services:
  agendadb:
    build:
      context: ./db
    networks:
      - br.albatross.agenda-bridged-network
    volumes:
      - br.albatross.agenda-db-vol:/var/lib/mysql
    image: ${AGENDA_DB_IMAGE_NAME}
    container_name: ${AGENDADB_MYSQL_CONTAINER}
    restart: always
    
  agendarestservice:
    build:
      context: ./app
      args:
        - AGENDADB_MYSQL_CONTAINER=${AGENDADB_MYSQL_CONTAINER}
        - AGENDADB_MYSQL_USER=${AGENDADB_MYSQL_USER}
        - AGENDADB_MYSQL_PASSWORD=${AGENDADB_MYSQL_PASSWORD}
        - AGENDADB_MYSQL_DATABASE_NAME=${AGENDADB_MYSQL_DATABASE_NAME}
    image: ${AGENDA_APP_REST_SERVICE_IMAGE_NAME}
    container_name: ${AGENDA_APP_REST_SERVICE_CONTAINER_NAME}
    volumes:
      - br.albatross.agenda-app-vol:/opt/jboss/wildfly/standalone:rw
    networks:
      - br.albatross.agenda-bridged-network
    restart: always

    depends_on:
      agendadb:
        condition: service_started

    ports:
      - ${AGENDA_APP_REST_SERVICE_EXPOSED_PORT}:8080

  agendavueapp:
    build:
      context: ./vue
      args:
        - AGENDA_APP_REST_SERVICE=${AGENDA_APP_REST_SERVICE_CONTAINER_NAME}
    image: ${AGENDA_VUE_APP_IMAGE_NAME}
    container_name: ${AGENDA_VUE_APP_CONTAINER_NAME}
    networks:
      - br.albatross.agenda-bridged-network
    restart: always
    depends_on:
      agendarestservice:
        condition: service_started
    ports:
      - ${AGENDA_VUE_APP_EXPOSED_PORT}:80

volumes:
  br.albatross.agenda-app-vol:
    name: br.albatross.agenda-app-vol

  br.albatross.agenda-db-vol:
    name: br.albatross.agenda-db-vol

networks:
  br.albatross.agenda-bridged-network:
    name: br.albatross.agenda-bridged-network
