### 1. Adicionando Módulo do MySQL ####
module add --name=com.mysql --dependencies=jakarta.transaction.api,javax.api --resources=./mysql-connector-j.jar

### 2. Adicionando DataSource no Subsystem ####
/subsystem=datasources/jdbc-driver=mysql:add(driver-module-name=com.mysql, driver-xa-datasource-class-name=com.mysql.cj.jdbc.MysqlXADataSource)

## 2.1 Adicionando os DataSources do sistema de chamados e dos textos prontos ####
data-source add --name=AgendaDS --driver-name=mysql --jndi-name=java:jboss/datasources/AgendaDS --connection-url=jdbc:mysql://localhost:3306/agendadb --user-name=root --password=Bl@ck0511 --enabled=true

### Autenticação ###

### 3.1 Criando o JDBC-Realm para recuperar a senha e a role do usuário ####
/subsystem=elytron/jdbc-realm=agenda-jdbc-realm:add(principal-query=[{data-source=AgendaDS,sql="SELECT u.password AS 'password', r.name AS 'role' FROM users u INNER JOIN roles r ON u.fk_role_id=r.id WHERE u.username = ?", simple-digest-mapper={password-index=1, algorithm=simple-digest-sha-512, hash-encoding=base64},attribute-mapping=[{index=2,to=role}]}]

### 3.2 Criando Role Decoder ###
/subsystem=elytron/simple-role-decoder=attribute-to-role:add(attribute=role)

### 7.3 Definindo o Realm criado como padrão do ApplicationDomain padrão do Wildfly ###
### Isto é necessário caso o sistema faça uso de EJBs ###
batch
/subsystem=elytron/security-domain=ApplicationDomain:write-attribute(name=realms, value=[{realm=agenda-jdbc-realm, role-decoder=attribute-to-role}])
/subsystem=elytron/security-domain=ApplicationDomain:write-attribute(name=default-realm,value=agenda-jdbc-realm)
run-batch

## 3.3 Criando o Security Domain ####
#/subsystem=elytron/security-domain=agendaSD:add(realms=[{realm=agenda-jdbc-realm,role-decoder=attribute-to-role}],default-realm=agenda-jdbc-realm,permission-mapper=default-permission-mapper)

## 3.4 Criando a Http Authentication Factory ####
#/subsystem=elytron/http-authentication-factory=agenda-http-auth:add(http-server-mechanism-factory=global,security-domain=agendaSD,mechanism-configurations=[{mechanism-name=FORM,mechanism-realm-configurations=[{realm-name=agenda-jdbc-realm}]}])

## 3.5 Criando o App Security Domain no Subsystem do Undertow ###
#/subsystem=undertow/application-security-domain=agendaHttpSD:add(http-authentication-factory=agenda-http-auth)


## Security Logging ###
#/subsystem=logging/logger=org.jboss.security:add(level=ALL)

#/subsystem=logging/logger=org.jboss.as.security:add(level=ALL)

#/subsystem=logging/logger=org.picketbox:add(level=ALL)

#/subsystem=logging/logger=org.jboss.as.domain.management.security:add(level=ALL)

#/subsystem=logging/logger=org.wildfly.security:add(level=ALL)

#/subsystem=logging/logger=org.wildfly.elytron:add(level=ALL)

#/subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=ALL)

reload
